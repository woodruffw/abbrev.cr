crystal_doc_search_index_callback({"repository_name":"github.com/woodruffw/abbrev.cr","body":"abbrev.cr\n=========\n\n![license](https://raster.shields.io/badge/license-MIT%20with%20restrictions-green.png)\n[![Build Status](https://img.shields.io/github/workflow/status/woodruffw/abbrev.cr/CI/master)](https://github.com/woodruffw/abbrev.cr/actions?query=workflow%3ACI)\n\nA straightforward port of Ruby's\n[Abbrev](https://ruby-doc.org/stdlib/libdoc/abbrev/rdoc/Abbrev.html) to Crystal.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  abbrev:\n    github: woodruffw/abbrev.cr\n```\n\n## Usage\n\nUsage is nearly identical to Ruby's `Abbrev.abbrev` and `Array#abbrev`, except that the (optional)\n`pattern` parameter *has* to be a regular expression:\n\n```crystal\nrequire \"abbrev\"\n\nAbbrev.abbrev(%w{crystal})\n# => {\"crystal\" => \"crystal\", \"crysta\" => \"crystal\", \"cryst\" => \"crystal\", \"crys\" => \"crystal\", \"cry\" => \"crystal\", \"cr\" => \"crystal\", \"c\" => \"crystal\"}\n\nAbbrev.abbrev(%w{crystal ruby}, /^r/)\n# => {\"ruby\" => \"ruby\", \"rub\" => \"ruby\", \"ru\" => \"ruby\", \"r\" => \"ruby\"}\n\n%w{crystal is fun}.abbrev\n# => {\"crystal\" => \"crystal\", \"crysta\" => \"crystal\", \"cryst\" => \"crystal\", \"crys\" => \"crystal\", \"cry\" => \"crystal\", \"cr\" => \"crystal\", \"c\" => \"crystal\", \"is\" => \"is\", \"i\" => \"is\", \"fun\" => \"fun\", \"fu\" => \"fun\", \"f\" => \"fun\"}\n```\n\n## Contributing\n\n1. Fork it (https://github.com/woodruffw/abbrev/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [woodruffw](https://github.com/woodruffw) William Woodruff - creator, maintainer\n","program":{"html_id":"github.com/woodruffw/abbrev.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/woodruffw/abbrev.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/woodruffw/abbrev.cr/Abbrev","path":"Abbrev.html","kind":"module","full_name":"Abbrev","name":"Abbrev","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"abbrev/version.cr","line_number":1,"url":"https://github.com/woodruffw/abbrev.cr/blob/c38a7ca9895b732db3c4cc512aa50468bd747b00/src/abbrev/version.cr"},{"filename":"abbrev.cr","line_number":7,"url":"https://github.com/woodruffw/abbrev.cr/blob/c38a7ca9895b732db3c4cc512aa50468bd747b00/src/abbrev.cr"}],"repository_name":"github.com/woodruffw/abbrev.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/woodruffw/abbrev.cr/Abbrev","kind":"module","full_name":"Abbrev","name":"Abbrev"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"Calculates the set of unambiguous abbreviations for a given set of strings.\n\nThis module is a straightforward port of Ruby's\n[`Abbrev`](https://ruby-doc.org/stdlib/libdoc/abbrev/rdoc/Abbrev.html).","summary":"<p>Calculates the set of unambiguous abbreviations for a given set of strings.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"abbrev(words:Enumerable(String),pattern:Regex?=nil)-instance-method","html_id":"abbrev(words:Enumerable(String),pattern:Regex?=nil)-instance-method","name":"abbrev","doc":"Generates a table of unambiguous abbreviations for each word in *words*.\n\nIf *pattern* is given, then only those abbreviations that match the pattern\nare included in the table.\n\nReturns a `Hash` containing the mappings of abbreviations to words.\n\n```\nAbbrev.abbrev(%w{crystal})\n# => {\"crystal\" => \"crystal\", \"crysta\" => \"crystal\", \"cryst\" => \"crystal\", \"crys\" => \"crystal\", \"cry\" => \"crystal\", \"cr\" => \"crystal\", \"c\" => \"crystal\"}\n\nAbbrev.abbrev(%w{crystal ruby}, /^r/)\n# => {\"ruby\" => \"ruby\", \"rub\" => \"ruby\", \"ru\" => \"ruby\", \"r\" => \"ruby\"}\n```","summary":"<p>Generates a table of unambiguous abbreviations for each word in <em>words</em>.</p>","abstract":false,"args":[{"name":"words","doc":null,"default_value":"","external_name":"words","restriction":"Enumerable(String)"},{"name":"pattern","doc":null,"default_value":"nil","external_name":"pattern","restriction":"Regex | ::Nil"}],"args_string":"(words : Enumerable(String), pattern : Regex? = <span class=\"n\">nil</span>)","source_link":"https://github.com/woodruffw/abbrev.cr/blob/c38a7ca9895b732db3c4cc512aa50468bd747b00/src/abbrev.cr#L24","def":{"name":"abbrev","args":[{"name":"words","doc":null,"default_value":"","external_name":"words","restriction":"Enumerable(String)"},{"name":"pattern","doc":null,"default_value":"nil","external_name":"pattern","restriction":"Regex | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"table = {} of String => String\nseen = Hash(String, Int64).new(0_i64)\nwords.each do |word|\n  if word.empty?\n    next\n  end\n  word.size.downto(1) do |len|\n    abbrev = word[0...len]\n    if pattern && (pattern !~ abbrev)\n      next\n    end\n    case     __temp_24 = abbrev\n    seen[__temp_24] = seen[__temp_24] + 1\n\n    when 1\n      table[abbrev] = word\n    when 2\n      table.delete(abbrev)\n    else\n      break\n    end\n  end\nend\nwords.each do |word|\n  if pattern && (pattern !~ word)\n    next\n  end\n  table[word] = word\nend\ntable\n"}}],"macros":[],"types":[]},{"html_id":"github.com/woodruffw/abbrev.cr/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"github.com/woodruffw/abbrev.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/woodruffw/abbrev.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/woodruffw/abbrev.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/woodruffw/abbrev.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/woodruffw/abbrev.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/woodruffw/abbrev.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/woodruffw/abbrev.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"abbrev.cr","line_number":55,"url":"https://github.com/woodruffw/abbrev.cr/blob/c38a7ca9895b732db3c4cc512aa50468bd747b00/src/abbrev.cr"}],"repository_name":"github.com/woodruffw/abbrev.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/woodruffw/abbrev.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/woodruffw/abbrev.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"abbrev(pattern:Regex?=nil)-instance-method","html_id":"abbrev(pattern:Regex?=nil)-instance-method","name":"abbrev","doc":"See `Abbrev.abbrev`.\n\n```\n%w{crystal is fun}.abbrev\n# => {\"crystal\" => \"crystal\", \"crysta\" => \"crystal\", \"cryst\" => \"crystal\", \"crys\" => \"crystal\", \"cry\" => \"crystal\", \"cr\" => \"crystal\", \"c\" => \"crystal\", \"is\" => \"is\", \"i\" => \"is\", \"fun\" => \"fun\", \"fu\" => \"fun\", \"f\" => \"fun\"}\n```","summary":"<p>See <code><a href=\"Abbrev.html#abbrev(words:Enumerable(String),pattern:Regex?=nil)-instance-method\">Abbrev.abbrev</a></code>.</p>","abstract":false,"args":[{"name":"pattern","doc":null,"default_value":"nil","external_name":"pattern","restriction":"Regex | ::Nil"}],"args_string":"(pattern : Regex? = <span class=\"n\">nil</span>)","source_link":"https://github.com/woodruffw/abbrev.cr/blob/c38a7ca9895b732db3c4cc512aa50468bd747b00/src/abbrev.cr#L62","def":{"name":"abbrev","args":[{"name":"pattern","doc":null,"default_value":"nil","external_name":"pattern","restriction":"Regex | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Abbrev.abbrev(self, pattern)"}}],"macros":[],"types":[]}]}})